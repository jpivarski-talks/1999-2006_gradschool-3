shearFunkyVaryPhi0dm1mm = {{{0.039872291095226144, -0.001397732008248329, 
       0.0010096481530593657, -0.00912285710184273, 
       0.000014802166345017172}}, {{0.03992355178613306, 0.31229043311694976, 
       0.0015350756895124067, -0.011242013079452641, 
       -9.317663295033855*^-6}}, {{0.0399916526130208, 0.6261492264403716, 
       0.0018165207056639304, -0.012256661758074348, 
       -8.744121278635072*^-6}}, {{0.04003630174093607, 0.940247579107484, 
       0.001815379447168728, -0.012048198010077171, 
       -0.000015035488879558737}}, {{0.03717267575147147, 1.2579780729153793, 
       0.0005771363032892737, -0.005393583553976382, 
       -0.0032594374740539498}}, {{0.04015620807443, 1.5690362110780451, 
       0.0010247961178972932, -0.008330080946608387, 
       -0.00001169492700097466}}, {{0.03872943024159187, 1.885431107628235, 
       -0.000181956695066, -0.002615348004195973, -0.0018289350117111477}}, 
     {{0.039546911569664236, 2.199285031984493, -0.0007629706954265392, 
       -0.00025574590693129546, -0.0009104946604917493}}, 
     {{0.04053883006079998, 2.5129703229273024, -0.0013257356606025412, 
       0.0018430585568638828, 0.00007939104863660416}}, 
     {{0.04149023742057867, 2.8266755597314597, -0.0018544060519883382, 
       0.0036093996267365282, 0.0011604024351846304}}, 
     {{0.039995891120675094, 3.143156781275997, -0.0030579187790178318, 
       0.009190040853280654, -0.00040105859989124457}}, 
     {{0.04251098167770555, 3.454782030689604, -0.0027374611265280117, 
       0.00679378213395781, 0.002462260692979701}}, 
     {reFit[{0.04, 3.7699111843077517, -0.001, 0., 0.}, 
       {{17, wire$286948874, dca$286948874}, {18, wire$286948874, 
         dca$286948874}, {19, wire$286948874, dca$286948874}, 
        {20, wire$286948874, dca$286948874}, {21, wire$286948874, 
         dca$286948874}, {22, wire$286948874, dca$286948874}, 
        {23, wire$286948874, dca$286948874}, {24, wire$286948874, 
         dca$286948874}, {25, wire$286948874, dca$286948874}, 
        {26, wire$286948874, dca$286948874}, {27, wire$286948874, 
         dca$286948874}, {28, wire$286948874, dca$286948874}, 
        {29, wire$286948874, dca$286948874}, {30, wire$286948874, 
         dca$286948874}, {31, wire$286948874, dca$286948874}, 
        {32, wire$286948874, dca$286948874}, {33, wire$286948874, 
         dca$286948874}, {34, wire$286948874, dca$286948874}, 
        {35, wire$286948874, dca$286948874}, {36, wire$286948874, 
         dca$286948874}, {37, wire$286948874, dca$286948874}, 
        {38, wire$286948874, dca$286948874}, {39, wire$286948874, 
         dca$286948874}, {40, wire$286948874, dca$286948874}, 
        {41, wire$286948874, dca$286948874}, {42, wire$286948874, 
         dca$286948874}, {43, wire$286948874, dca$286948874}, 
        {44, wire$286948874, dca$286948874}, {45, wire$286948874, 
         dca$286948874}, {46, wire$286948874, dca$286948874}, 
        {47, wire$286948874, dca$286948874}}, {{1, 0, 0}, 
        {0, 0.9998476951563913, 0.01745240643728351}, 
        {0, -0.01745240643728351, 0.9998476951563913}, {0, 0, -1.25}}, 
       {{0.9998476951563913, 0, 0.01745240643728351}, {0, 1, 0}, 
        {-0.01745240643728351, 0, 0.9998476951563913}, {0, 0, 1.25}}]}, 
     {{0.03985769090047788, 4.086422108542326, -0.003831414097718956, 
       0.011537441364324247, 0.0005784447643384211}}, 
     {{0.042851289817490416, 4.396894401799387, -0.002568955438442948, 
       0.005365628551439855, 0.003797169479832148}}, 
     {{0.04224190749208544, 4.711361870190131, -0.0022267239156596457, 
       0.003912594608417041, 0.0034926178138108043}}, 
     {{0.0414147596408791, 5.0259319379922305, -0.0017666473507006132, 
       0.002286085166810032, 0.002791388477363519}}, 
     {{0.040424261947350666, 5.340581926553349, -0.001235727755336998, 
       0.0002567708337248926, 0.0019370577556394653}}, 
     {{0.0394308773211478, 5.655191036918376, -0.0006672101910490819, 
       -0.002110853576573641, 0.0010398344223298583}}, 
     {{0.03845909391318718, 5.9698116720829315, -0.000146651881594654, 
       -0.003821788526599467, -0.00023968451067151657}}, 
     {{0.039872305011669835, 6.281787557492286, 0.0010096537729107021, 
       -0.0091228547727426, 0.000014799498590470717}}}
 
reFit[{curv_, phi0_, d0_, cotTh_, z0_}, 
     hits:{{_Integer, _Integer, _Integer | _Real}..}, 
     eastTrans:{{_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}}, 
     westTrans:{{_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}}] := 
    Module[{explicitHits = ({wireLine[#1[[1]], #1[[2]], eastTrans, 
           westTrans], #1[[3]]} & ) /@ hits}, {c, p, d, t, z} /. 
      FindMinimum[chiSquare[{c, p, d, t, z}, explicitHits], 
        {c, curv, curv + 2.*^-6}, {p, phi0, phi0 + 0.00005}, 
        {d, d0, d0 + 0.00005}, {t, cotTh, cotTh + 0.04}, {z, z0, z0 + 0.02}, 
        AccuracyGoal -> 14, MaxIterations -> 100][[2]]]
 
wireLine[layer_, wire_, eastTrans:{{_Integer | _Real, _Integer | _Real, 
        _Integer | _Real}, {_Integer | _Real, _Integer | _Real, 
        _Integer | _Real}, {_Integer | _Real, _Integer | _Real, 
        _Integer | _Real}, {_Integer | _Real, _Integer | _Real, 
        _Integer | _Real}}, westTrans:{{_Integer | _Real, _Integer | _Real, 
        _Integer | _Real}, {_Integer | _Real, _Integer | _Real, 
        _Integer | _Real}, {_Integer | _Real, _Integer | _Real, 
        _Integer | _Real}, {_Integer | _Real, _Integer | _Real, 
        _Integer | _Real}}] := Module[{eastMatrix = eastTrans[[{1, 2, 3}]], 
      eastCenter = eastTrans[[4]], westMatrix = westTrans[[{1, 2, 3}]], 
      westCenter = westTrans[[4]]}, 
     {eastMatrix . (eastPoint[layer, wire] - eastCenter) + eastCenter, 
      westMatrix . (westPoint[layer, wire] - westCenter) + westCenter}]
 
wireLine[layer_, wire_] := wireLine[layer, wire, Join[IdentityMatrix[3], 
      {{0, 0, 0}}], Join[IdentityMatrix[3], {{0, 0, 0}}]]
 
eastPoint[layer_, wire_] := radius[[layer]]*{Cos[eastPhiWire[layer, wire]], 
       Sin[eastPhiWire[layer, wire]], 0} + {0, 0, -zend[radius[[layer]]]}
 
radius = {0.13210000000000002, 0.1459, 0.16010000000000002, 0.1739, 0.1884, 
     0.2022, 0.2163, 0.23010000000000003, 0.2445, 0.2583, 0.2726, 0.2864, 
     0.3004, 0.31420000000000003, 0.3284, 0.3422, 0.37, 0.3839, 
     0.39780000000000004, 0.4118, 0.4261, 0.44, 0.454, 0.4679, 0.4822, 
     0.4961, 0.5101, 0.524, 0.5382, 0.5522, 0.5661, 0.58, 0.5943, 0.6082, 
     0.6221, 0.636, 0.6502, 0.6642, 0.6781, 0.6920000000000001, 0.7062, 
     0.7201000000000001, 0.7340000000000001, 0.748, 0.7621, 
     0.7759999999999999, 0.79}
 
eastPhiWire[layer_, wire_] := phi0east[[layer]] + 
     (wire*2*Pi)/numberWires[[layer]]
 
phi0east = {-0.00003490658503988659, -0.04906120527356061, 
     -0.000017453292519943296, -0.0436157780073383, -0.000015707963267948967, 
     -0.03569023787403205, -0.000017453292519943296, -0.03270747018237374, 
     -5.235987755982989*^-6, -0.028035223774784915, -8.726646259971648*^-6, 
     -0.024530602636780304, -1.7453292519943298*^-6, -0.023090706003884978, 
     6.981317007977319*^-6, -0.020671679660620838, -0.06281439977927593, 
     -0.08033750546929899, -0.06300638599699529, -0.08059930485709815, 
     0.0587303293296092, 0.043388885204579036, 0.05892231554732857, 
     0.043650684592378176, -0.0553094839957003, -0.06920230484157516, 
     -0.05553637679845957, -0.06942919764433443, 0.05244714402242961, 
     0.040107666210829694, 0.05267403682518886, 0.040334559013588955, 
     -0.050003683069637546, -0.06148794954776023, -0.050213122579876854, 
     -0.06169738905799955, 0.04785692808968452, 0.0374896723328382, 
     0.04806636759992384, 0.037699111843077525, -0.04597197249753064, 
     -0.05576326960121882, -0.04616395871525002, -0.05597270911145815, 
     0.044558255803415235, 0.03560471674068433, 0.04473278872861467}
 
numberWires = {64, 64, 72, 72, 88, 88, 96, 96, 112, 112, 128, 128, 136, 136, 
     152, 152, 180, 180, 180, 180, 204, 204, 204, 204, 228, 228, 228, 228, 
     252, 252, 252, 252, 276, 276, 276, 276, 300, 300, 300, 300, 324, 324, 
     324, 324, 348, 348, 348}
 
zend[rad_] := ((1.16 - 1.085)*rad)/(0.79 - 0.37) + 1.085 - 0.0660714
 
westPoint[layer_, wire_] := radius[[layer]]*{Cos[westPhiWire[layer, wire]], 
       Sin[westPhiWire[layer, wire]], 0} + {0, 0, zend[radius[[layer]]]}
 
westPhiWire[layer_, wire_] := phi0west[[layer]] + 
     (wire*2*Pi)/numberWires[[layer]]
 
phi0west = {0.00003490658503988659, -0.04911356515112044, 
     0.000017453292519943296, -0.043650684592378176, 0.000015707963267948967, 
     -0.03570943649580398, 0.000017453292519943296, -0.03274237676741362, 
     5.235987755982989*^-6, -0.028064894372068824, 8.726646259971648*^-6, 
     -0.02455678257556022, 1.7453292519943298*^-6, -0.023108159296404925, 
     6.981317007977319*^-6, -0.020664698343612863, 0.06281439977927593, 
     0.0454309204294124, 0.06300638599699529, 0.04569271981721155, 
     -0.0587303293296092, -0.074176493209759, -0.05892231554732857, 
     -0.07443829259755816, 0.0553094839957003, 0.041643555952584704, 
     0.05553637679845957, 0.04188790204786391, -0.05244714402242961, 
     -0.06503096792930872, -0.05267403682518886, -0.06525786073206798, 
     0.050003683069637546, 0.038728856101754174, 0.050213122579876854, 
     0.03893829561199349, -0.04785692808968452, -0.058433623356770145, 
     -0.04806636759992384, -0.058643062867009474, 0.04597197249753064, 
     0.03637266161156183, 0.04616395871525002, 0.03658210112180115, 
     -0.044558255803415235, -0.05366887449882564, -0.04473278872861467}
 
chiSquare[{curv_, phi0_, d0_, cotTh_, z0_}, 
     hits:{{{{_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
          {_Integer | _Real, _Integer | _Real, _Integer | _Real}}, 
         _Integer | _Real}..}] := 
    Plus @@ ((dcaHelixWire[{curv, phi0, d0, cotTh, z0}, #1[[1]]] - #1[[2]])^
        2 & ) /@ hits
 
chiSquare[{curv_, phi0_, d0_, cotTh_, z0_}, 
     hits:{{_Integer, _Integer, _Integer | _Real}..}, 
     eastTrans:{{_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}}, 
     westTrans:{{_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}, 
       {_Integer | _Real, _Integer | _Real, _Integer | _Real}}] := 
    chiSquare[{curv, phi0, d0, cotTh, z0}, 
     ({wireLine[#1[[1]], #1[[2]], eastTrans, westTrans], #1[[3]]} & ) /@ hits]
 
chiSquare[{curv_, phi0_, d0_, cotTh_, z0_}, 
     hits:{{_Integer, _Integer, _Integer | _Real}..}] := 
    chiSquare[{curv, phi0, d0, cotTh, z0}, hits, Join[IdentityMatrix[3], 
      {{0, 0, 0}}], Join[IdentityMatrix[3], {{0, 0, 0}}]]
 
dcaHelixWire[{curv_, phi0_, d0_, cotTh_, z0_}, {{x1_, y1_, z1_}, 
      {x2_, y2_, z2_}}] := (Sqrt[#1[[1]]^2 + #1[[2]]^2 + #1[[3]]^2] & )[
     vcaHelixWire[{curv, phi0, d0, cotTh, z0}, {{x1, y1, z1}, {x2, y2, z2}}]]
 
vcaHelixWire[{curv_, phi0_, d0_, cotTh_, z0_}, {{x1_, y1_, z1_}, 
      {x2_, y2_, z2_}}] := Module[{sp, pca}, 
     {sp, pca} = minimizeHelixWire[{curv, phi0, d0, cotTh, z0}, 
        {{x1, y1, z1}, {x2, y2, z2}}]; pca - helixPoint[sp, 
        {curv, phi0, d0, cotTh, z0}]]
 
pca[{a_, b_, c_}, {{x1_, y1_, z1_}, {x2_, y2_, z2_}}] := 
    pcaInternal[a, b, c, x1, y1, z1, x2, y2, z2]
 
pcaInternal = CompiledFunction[{_Real, _Real, _Real, _Real, _Real, _Real, 
      _Real, _Real, _Real}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 3}, 
      {3, 0, 4}, {3, 0, 5}, {3, 0, 6}, {3, 0, 7}, {3, 0, 8}}, 
     {0, 0, 45, 0, 1}, {{1, 3}, {38, 6, 9}, {30, 3, 9, 9}, {38, 6, 10}, 
      {30, 3, 10, 10}, {38, 0, 11}, {30, 11, 6, 11}, {34, 10, 11, 10}, 
      {38, 7, 11}, {30, 4, 11, 11}, {38, 1, 12}, {30, 12, 7, 12}, 
      {34, 11, 12, 11}, {38, 8, 12}, {30, 5, 12, 12}, {38, 2, 13}, 
      {30, 13, 8, 13}, {34, 12, 13, 12}, {30, 10, 11, 12, 10}, 
      {34, 9, 10, 9}, {38, 6, 10}, {30, 3, 10, 10}, {34, 10, 10, 11}, 
      {38, 7, 12}, {30, 4, 12, 12}, {34, 12, 12, 13}, {38, 8, 14}, 
      {30, 5, 14, 14}, {34, 14, 14, 15}, {30, 11, 13, 15, 16}, {41, 16, 17}, 
      {34, 9, 17, 18}, {38, 18, 19}, {30, 6, 19, 20}, {38, 7, 21}, 
      {30, 4, 21, 21}, {38, 6, 22}, {30, 3, 22, 22}, {38, 0, 23}, 
      {30, 23, 6, 23}, {34, 22, 23, 22}, {38, 7, 23}, {30, 4, 23, 23}, 
      {38, 1, 24}, {30, 24, 7, 24}, {34, 23, 24, 23}, {38, 8, 24}, 
      {30, 5, 24, 24}, {38, 2, 25}, {30, 25, 8, 25}, {34, 24, 25, 24}, 
      {30, 22, 23, 24, 22}, {34, 21, 22, 21}, {38, 6, 22}, {30, 3, 22, 22}, 
      {34, 22, 22, 23}, {38, 7, 24}, {30, 4, 24, 24}, {34, 24, 24, 25}, 
      {38, 8, 26}, {30, 5, 26, 26}, {34, 26, 26, 27}, {30, 23, 25, 27, 28}, 
      {41, 28, 29}, {34, 21, 29, 30}, {38, 30, 31}, {30, 7, 31, 32}, 
      {38, 8, 33}, {30, 5, 33, 33}, {38, 6, 34}, {30, 3, 34, 34}, 
      {38, 0, 35}, {30, 35, 6, 35}, {34, 34, 35, 34}, {38, 7, 35}, 
      {30, 4, 35, 35}, {38, 1, 36}, {30, 36, 7, 36}, {34, 35, 36, 35}, 
      {38, 8, 36}, {30, 5, 36, 36}, {38, 2, 37}, {30, 37, 8, 37}, 
      {34, 36, 37, 36}, {30, 34, 35, 36, 34}, {34, 33, 34, 33}, {38, 6, 34}, 
      {30, 3, 34, 34}, {34, 34, 34, 35}, {38, 7, 36}, {30, 4, 36, 36}, 
      {34, 36, 36, 37}, {38, 8, 38}, {30, 5, 38, 38}, {34, 38, 38, 39}, 
      {30, 35, 37, 39, 40}, {41, 40, 41}, {34, 33, 41, 42}, {38, 42, 43}, 
      {30, 8, 43, 44}, {68, 20, 32, 44, 3, 0}, {6, 3, 1, 0}}, 
     Function[{a, b, c, x1, y1, z1, x2, y2, z2}, 
      {x2 - ((x1 - x2)*((x1 - x2)*(-a + x2) + (y1 - y2)*(-b + y2) + 
           (z1 - z2)*(-c + z2)))/((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2), 
       y2 - ((y1 - y2)*((x1 - x2)*(-a + x2) + (y1 - y2)*(-b + y2) + 
           (z1 - z2)*(-c + z2)))/((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2), 
       z2 - ((z1 - z2)*((x1 - x2)*(-a + x2) + (y1 - y2)*(-b + y2) + 
           (z1 - z2)*(-c + z2)))/((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2)}]]
 
minimizeHelixWire[{curv_, phi0_, d0_, cotTh_, z0_}, 
     {{x1_, y1_, z1_}, {x2_, y2_, z2_}}] := 
    Module[{sp = bisect[helixDcaDerivative[#1, {curv, phi0, d0, cotTh, z0}, 
          {{x1, y1, z1}, {x2, y2, z2}}] & , {0, Pi/(2*curv)}]}, 
     {sp, pca[helixPoint[sp, {curv, phi0, d0, cotTh, z0}], 
       {{x1, y1, z1}, {x2, y2, z2}}]}]
 
bisect[f_, {low_, high_}, {flow_, fhigh_}] := Module[{mid, fmid}, 
     mid = -((flow*(high - low))/(fhigh - flow)) + low; fmid = N[f[mid]]; 
      If[fmid > bisectEpsilon, bisect[f, {low, mid}, {flow, fmid}], 
       If[fmid < -bisectEpsilon, bisect[f, {mid, high}, {fmid, fhigh}], mid]]]
 
bisect[f_, {low_, high_}] := bisect[f, {low, high}, {f[low], f[high]}]
 
bisectEpsilon = 1/1000000000
 
helixDcaDerivative[sp_, {curv_, phi0_, d0_, cotTh_, z0_}, 
     {{x1_, y1_, z1_}, {x2_, y2_, z2_}}] := helixDcaDerivativeInternal[sp, 
     curv, phi0, d0, cotTh, z0, x1, y1, z1, x2, y2, z2]
 
helixDcaDerivativeInternal = CompiledFunction[{_Real, _Real, _Real, _Real, 
      _Real, _Real, _Real, _Real, _Real, _Real, _Real, _Real}, 
     {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 3}, {3, 0, 4}, {3, 0, 5}, 
      {3, 0, 6}, {3, 0, 7}, {3, 0, 8}, {3, 0, 9}, {3, 0, 10}, {3, 0, 11}}, 
     {0, 6, 173, 0, 0}, {{1, 3}, {9, 2, 0}, {95, 2, 3, 0, 2, 3, 0, 12}, 
      {9, 2, 1}, {19, 1, 1, 13}, {34, 13, 1, 0, 13}, 
      {95, 2, 3, 0, 13, 3, 0, 14}, {34, 12, 14, 12}, {38, 12, 13}, 
      {95, 1, 3, 0, 2, 3, 0, 14}, {9, 2, 1}, {19, 1, 1, 15}, 
      {34, 15, 1, 0, 15}, {95, 1, 3, 0, 15, 3, 0, 16}, {34, 14, 16, 14}, 
      {38, 9, 15}, {30, 6, 15, 15}, {38, 11, 16}, {30, 8, 16, 16}, 
      {34, 4, 16, 16}, {38, 16, 17}, {38, 10, 18}, {30, 7, 18, 18}, 
      {9, 2, 1}, {19, 1, 1, 19}, {34, 19, 1, 0, 19}, 
      {95, 2, 3, 0, 19, 3, 0, 20}, {95, 1, 3, 0, 2, 3, 0, 21}, 
      {34, 20, 21, 19}, {38, 19, 20}, {95, 2, 3, 0, 2, 3, 0, 21}, {9, 2, 1}, 
      {19, 1, 1, 22}, {34, 22, 1, 0, 22}, {95, 1, 3, 0, 22, 3, 0, 23}, 
      {34, 21, 23, 21}, {38, 21, 22}, {30, 20, 22, 19}, {34, 18, 19, 18}, 
      {38, 9, 19}, {30, 6, 19, 19}, {95, 2, 3, 0, 2, 3, 0, 20}, {9, 2, 1}, 
      {19, 1, 1, 21}, {34, 21, 1, 0, 21}, {95, 2, 3, 0, 21, 3, 0, 22}, 
      {34, 20, 22, 20}, {38, 20, 21}, {95, 1, 3, 0, 2, 3, 0, 22}, {9, 2, 1}, 
      {19, 1, 1, 23}, {34, 23, 1, 0, 23}, {95, 1, 3, 0, 23, 3, 0, 24}, 
      {34, 22, 24, 22}, {30, 21, 22, 20}, {34, 19, 20, 19}, 
      {30, 17, 18, 19, 16}, {34, 15, 16, 15}, {38, 9, 16}, {30, 6, 16, 16}, 
      {34, 16, 16, 17}, {38, 10, 18}, {30, 7, 18, 18}, {34, 18, 18, 19}, 
      {38, 11, 20}, {30, 8, 20, 20}, {34, 20, 20, 21}, {30, 17, 19, 21, 22}, 
      {41, 22, 23}, {34, 15, 23, 24}, {38, 24, 25}, {30, 13, 14, 25, 26}, 
      {95, 1, 3, 0, 2, 3, 0, 27}, {34, 3, 27, 27}, {9, 1, 1}, {9, 2, 2}, 
      {19, 1, 2, 28}, {34, 28, 1, 0, 28}, {95, 2, 3, 0, 28, 3, 0, 29}, 
      {38, 29, 30}, {19, 0, 1, 31}, {30, 31, 30, 28}, 
      {95, 1, 3, 0, 2, 3, 0, 29}, {34, 28, 29, 28}, {9, 2, 1}, 
      {19, 1, 1, 29}, {34, 29, 1, 29}, {41, 29, 29}, {34, 28, 29, 28}, 
      {95, 2, 3, 0, 2, 3, 0, 29}, {9, 2, 1}, {19, 1, 1, 30}, 
      {34, 30, 1, 0, 30}, {95, 1, 3, 0, 30, 3, 0, 31}, {34, 29, 31, 29}, 
      {9, 2, 1}, {19, 1, 1, 30}, {34, 30, 1, 30}, {41, 30, 30}, 
      {34, 29, 30, 29}, {38, 29, 30}, {38, 9, 31}, {30, 6, 31, 31}, 
      {38, 11, 32}, {30, 8, 32, 32}, {34, 4, 0, 33}, {38, 33, 34}, 
      {38, 5, 35}, {30, 34, 35, 11, 33}, {34, 32, 33, 32}, {38, 9, 33}, 
      {30, 6, 33, 33}, {95, 1, 3, 0, 2, 3, 0, 34}, {34, 3, 34, 34}, 
      {9, 1, 1}, {9, 2, 2}, {19, 1, 2, 35}, {34, 35, 1, 0, 35}, 
      {95, 2, 3, 0, 35, 3, 0, 36}, {38, 36, 37}, {19, 0, 1, 38}, 
      {30, 38, 37, 35}, {95, 1, 3, 0, 2, 3, 0, 36}, {34, 35, 36, 35}, 
      {9, 2, 1}, {19, 1, 1, 36}, {34, 36, 1, 36}, {41, 36, 36}, 
      {34, 35, 36, 35}, {95, 2, 3, 0, 2, 3, 0, 36}, {9, 2, 1}, 
      {19, 1, 1, 37}, {34, 37, 1, 0, 37}, {95, 1, 3, 0, 37, 3, 0, 38}, 
      {34, 36, 38, 36}, {9, 2, 1}, {19, 1, 1, 37}, {34, 37, 1, 37}, 
      {41, 37, 37}, {34, 36, 37, 36}, {38, 36, 37}, {30, 9, 34, 35, 37, 34}, 
      {34, 33, 34, 33}, {38, 10, 34}, {30, 7, 34, 34}, 
      {95, 2, 3, 0, 2, 3, 0, 35}, {34, 3, 35, 35}, {38, 35, 36}, 
      {95, 2, 3, 0, 2, 3, 0, 37}, {9, 1, 1}, {9, 2, 2}, {19, 1, 2, 38}, 
      {34, 38, 1, 0, 38}, {95, 2, 3, 0, 38, 3, 0, 39}, {38, 39, 40}, 
      {19, 0, 1, 41}, {30, 41, 40, 38}, {34, 37, 38, 37}, {9, 2, 1}, 
      {19, 1, 1, 38}, {34, 38, 1, 38}, {41, 38, 38}, {34, 37, 38, 37}, 
      {38, 37, 38}, {95, 1, 3, 0, 2, 3, 0, 39}, {9, 2, 1}, {19, 1, 1, 40}, 
      {34, 40, 1, 0, 40}, {95, 1, 3, 0, 40, 3, 0, 41}, {34, 39, 41, 39}, 
      {9, 2, 1}, {19, 1, 1, 40}, {34, 40, 1, 40}, {41, 40, 40}, 
      {34, 39, 40, 39}, {38, 39, 40}, {30, 10, 36, 38, 40, 35}, 
      {34, 34, 35, 34}, {30, 32, 33, 34, 32}, {34, 31, 32, 31}, {38, 9, 32}, 
      {30, 6, 32, 32}, {34, 32, 32, 33}, {38, 10, 34}, {30, 7, 34, 34}, 
      {34, 34, 34, 35}, {38, 11, 36}, {30, 8, 36, 36}, {34, 36, 36, 37}, 
      {30, 33, 35, 37, 38}, {41, 38, 39}, {34, 31, 39, 40}, {38, 40, 41}, 
      {30, 9, 27, 28, 30, 41, 42}, {19, 1, 0, 43}, {34, 43, 26, 42, 44}, 
      {9, 2, 1}, {9, 2, 2}, {19, 1, 2, 45}, {34, 45, 1, 0, 45}, 
      {95, 2, 3, 0, 45, 3, 0, 46}, {95, 1, 3, 0, 2, 3, 0, 47}, 
      {34, 46, 47, 45}, {38, 45, 46}, {95, 2, 3, 0, 2, 3, 0, 47}, {9, 2, 2}, 
      {19, 1, 2, 48}, {34, 48, 1, 0, 48}, {95, 1, 3, 0, 48, 3, 0, 49}, 
      {34, 47, 49, 47}, {38, 47, 48}, {38, 10, 49}, {30, 7, 49, 49}, 
      {38, 11, 50}, {30, 8, 50, 50}, {34, 4, 50, 50}, {38, 50, 51}, 
      {38, 10, 52}, {30, 7, 52, 52}, {9, 2, 2}, {19, 1, 2, 53}, 
      {34, 53, 1, 0, 53}, {95, 2, 3, 0, 53, 3, 0, 54}, 
      {95, 1, 3, 0, 2, 3, 0, 55}, {34, 54, 55, 53}, {38, 53, 54}, 
      {95, 2, 3, 0, 2, 3, 0, 55}, {9, 2, 2}, {19, 1, 2, 56}, 
      {34, 56, 1, 0, 56}, {95, 1, 3, 0, 56, 3, 0, 57}, {34, 55, 57, 55}, 
      {38, 55, 56}, {30, 54, 56, 53}, {34, 52, 53, 52}, {38, 9, 53}, 
      {30, 6, 53, 53}, {95, 2, 3, 0, 2, 3, 0, 54}, {9, 2, 2}, {19, 1, 2, 55}, 
      {34, 55, 1, 0, 55}, {95, 2, 3, 0, 55, 3, 0, 56}, {34, 54, 56, 54}, 
      {38, 54, 55}, {95, 1, 3, 0, 2, 3, 0, 56}, {9, 2, 2}, {19, 1, 2, 57}, 
      {34, 57, 1, 0, 57}, {95, 1, 3, 0, 57, 3, 0, 58}, {34, 56, 58, 56}, 
      {30, 55, 56, 54}, {34, 53, 54, 53}, {30, 51, 52, 53, 50}, 
      {34, 49, 50, 49}, {38, 9, 50}, {30, 6, 50, 50}, {34, 50, 50, 51}, 
      {38, 10, 52}, {30, 7, 52, 52}, {34, 52, 52, 53}, {38, 11, 54}, 
      {30, 8, 54, 54}, {34, 54, 54, 55}, {30, 51, 53, 55, 56}, {41, 56, 57}, 
      {34, 49, 57, 58}, {38, 58, 59}, {30, 46, 48, 59, 60}, 
      {95, 2, 3, 0, 2, 3, 0, 61}, {34, 3, 61, 61}, {38, 61, 62}, 
      {95, 2, 3, 0, 2, 3, 0, 63}, {9, 1, 2}, {9, 2, 3}, {19, 1, 3, 64}, 
      {34, 64, 1, 0, 64}, {95, 2, 3, 0, 64, 3, 0, 65}, {38, 65, 66}, 
      {19, 0, 2, 67}, {30, 67, 66, 64}, {34, 63, 64, 63}, {9, 2, 2}, 
      {19, 1, 2, 64}, {34, 64, 1, 64}, {41, 64, 64}, {34, 63, 64, 63}, 
      {38, 63, 64}, {95, 1, 3, 0, 2, 3, 0, 65}, {9, 2, 2}, {19, 1, 2, 66}, 
      {34, 66, 1, 0, 66}, {95, 1, 3, 0, 66, 3, 0, 67}, {34, 65, 67, 65}, 
      {9, 2, 2}, {19, 1, 2, 66}, {34, 66, 1, 66}, {41, 66, 66}, 
      {34, 65, 66, 65}, {38, 65, 66}, {38, 10, 67}, {30, 7, 67, 67}, 
      {38, 11, 68}, {30, 8, 68, 68}, {34, 4, 0, 69}, {38, 69, 70}, 
      {38, 5, 71}, {30, 70, 71, 11, 69}, {34, 68, 69, 68}, {38, 9, 69}, 
      {30, 6, 69, 69}, {95, 1, 3, 0, 2, 3, 0, 70}, {34, 3, 70, 70}, 
      {9, 1, 2}, {9, 2, 3}, {19, 1, 3, 71}, {34, 71, 1, 0, 71}, 
      {95, 2, 3, 0, 71, 3, 0, 72}, {38, 72, 73}, {19, 0, 2, 74}, 
      {30, 74, 73, 71}, {95, 1, 3, 0, 2, 3, 0, 72}, {34, 71, 72, 71}, 
      {9, 2, 2}, {19, 1, 2, 72}, {34, 72, 1, 72}, {41, 72, 72}, 
      {34, 71, 72, 71}, {95, 2, 3, 0, 2, 3, 0, 72}, {9, 2, 2}, 
      {19, 1, 2, 73}, {34, 73, 1, 0, 73}, {95, 1, 3, 0, 73, 3, 0, 74}, 
      {34, 72, 74, 72}, {9, 2, 2}, {19, 1, 2, 73}, {34, 73, 1, 73}, 
      {41, 73, 73}, {34, 72, 73, 72}, {38, 72, 73}, {30, 9, 70, 71, 73, 70}, 
      {34, 69, 70, 69}, {38, 10, 70}, {30, 7, 70, 70}, 
      {95, 2, 3, 0, 2, 3, 0, 71}, {34, 3, 71, 71}, {38, 71, 72}, 
      {95, 2, 3, 0, 2, 3, 0, 73}, {9, 1, 2}, {9, 2, 3}, {19, 1, 3, 74}, 
      {34, 74, 1, 0, 74}, {95, 2, 3, 0, 74, 3, 0, 75}, {38, 75, 76}, 
      {19, 0, 2, 77}, {30, 77, 76, 74}, {34, 73, 74, 73}, {9, 2, 2}, 
      {19, 1, 2, 74}, {34, 74, 1, 74}, {41, 74, 74}, {34, 73, 74, 73}, 
      {38, 73, 74}, {95, 1, 3, 0, 2, 3, 0, 75}, {9, 2, 2}, {19, 1, 2, 76}, 
      {34, 76, 1, 0, 76}, {95, 1, 3, 0, 76, 3, 0, 77}, {34, 75, 77, 75}, 
      {9, 2, 2}, {19, 1, 2, 76}, {34, 76, 1, 76}, {41, 76, 76}, 
      {34, 75, 76, 75}, {38, 75, 76}, {30, 10, 72, 74, 76, 71}, 
      {34, 70, 71, 70}, {30, 68, 69, 70, 68}, {34, 67, 68, 67}, {38, 9, 68}, 
      {30, 6, 68, 68}, {34, 68, 68, 69}, {38, 10, 70}, {30, 7, 70, 70}, 
      {34, 70, 70, 71}, {38, 11, 72}, {30, 8, 72, 72}, {34, 72, 72, 73}, 
      {30, 69, 71, 73, 74}, {41, 74, 75}, {34, 67, 75, 76}, {38, 76, 77}, 
      {30, 10, 62, 64, 66, 77, 78}, {19, 1, 1, 79}, {34, 79, 60, 78, 80}, 
      {9, 2, 2}, {38, 4, 81}, {38, 11, 82}, {30, 8, 82, 82}, {38, 11, 83}, 
      {30, 8, 83, 83}, {34, 4, 83, 83}, {38, 83, 84}, {38, 10, 85}, 
      {30, 7, 85, 85}, {9, 2, 3}, {19, 1, 3, 86}, {34, 86, 1, 0, 86}, 
      {95, 2, 3, 0, 86, 3, 0, 87}, {95, 1, 3, 0, 2, 3, 0, 88}, 
      {34, 87, 88, 86}, {38, 86, 87}, {95, 2, 3, 0, 2, 3, 0, 88}, {9, 2, 3}, 
      {19, 1, 3, 89}, {34, 89, 1, 0, 89}, {95, 1, 3, 0, 89, 3, 0, 90}, 
      {34, 88, 90, 88}, {38, 88, 89}, {30, 87, 89, 86}, {34, 85, 86, 85}, 
      {38, 9, 86}, {30, 6, 86, 86}, {95, 2, 3, 0, 2, 3, 0, 87}, {9, 2, 3}, 
      {19, 1, 3, 88}, {34, 88, 1, 0, 88}, {95, 2, 3, 0, 88, 3, 0, 89}, 
      {34, 87, 89, 87}, {38, 87, 88}, {95, 1, 3, 0, 2, 3, 0, 89}, {9, 2, 3}, 
      {19, 1, 3, 90}, {34, 90, 1, 0, 90}, {95, 1, 3, 0, 90, 3, 0, 91}, 
      {34, 89, 91, 89}, {30, 88, 89, 87}, {34, 86, 87, 86}, 
      {30, 84, 85, 86, 83}, {34, 82, 83, 82}, {38, 9, 83}, {30, 6, 83, 83}, 
      {34, 83, 83, 84}, {38, 10, 85}, {30, 7, 85, 85}, {34, 85, 85, 86}, 
      {38, 11, 87}, {30, 8, 87, 87}, {34, 87, 87, 88}, {30, 84, 86, 88, 89}, 
      {41, 89, 90}, {34, 82, 90, 91}, {38, 91, 92}, {30, 81, 92, 93}, 
      {34, 4, 0, 94}, {38, 94, 95}, {38, 5, 96}, {38, 11, 97}, 
      {30, 8, 97, 97}, {38, 11, 98}, {30, 8, 98, 98}, {34, 4, 0, 99}, 
      {38, 99, 100}, {38, 5, 101}, {30, 100, 101, 11, 99}, {34, 98, 99, 98}, 
      {38, 9, 99}, {30, 6, 99, 99}, {95, 1, 3, 0, 2, 3, 0, 100}, 
      {34, 3, 100, 100}, {9, 1, 3}, {9, 2, 4}, {19, 1, 4, 101}, 
      {34, 101, 1, 0, 101}, {95, 2, 3, 0, 101, 3, 0, 102}, {38, 102, 103}, 
      {19, 0, 3, 104}, {30, 104, 103, 101}, {95, 1, 3, 0, 2, 3, 0, 102}, 
      {34, 101, 102, 101}, {9, 2, 3}, {19, 1, 3, 102}, {34, 102, 1, 102}, 
      {41, 102, 102}, {34, 101, 102, 101}, {95, 2, 3, 0, 2, 3, 0, 102}, 
      {9, 2, 3}, {19, 1, 3, 103}, {34, 103, 1, 0, 103}, 
      {95, 1, 3, 0, 103, 3, 0, 104}, {34, 102, 104, 102}, {9, 2, 3}, 
      {19, 1, 3, 103}, {34, 103, 1, 103}, {41, 103, 103}, 
      {34, 102, 103, 102}, {38, 102, 103}, {30, 9, 100, 101, 103, 100}, 
      {34, 99, 100, 99}, {38, 10, 100}, {30, 7, 100, 100}, 
      {95, 2, 3, 0, 2, 3, 0, 101}, {34, 3, 101, 101}, {38, 101, 102}, 
      {95, 2, 3, 0, 2, 3, 0, 103}, {9, 1, 3}, {9, 2, 4}, {19, 1, 4, 104}, 
      {34, 104, 1, 0, 104}, {95, 2, 3, 0, 104, 3, 0, 105}, {38, 105, 106}, 
      {19, 0, 3, 107}, {30, 107, 106, 104}, {34, 103, 104, 103}, {9, 2, 3}, 
      {19, 1, 3, 104}, {34, 104, 1, 104}, {41, 104, 104}, 
      {34, 103, 104, 103}, {38, 103, 104}, {95, 1, 3, 0, 2, 3, 0, 105}, 
      {9, 2, 3}, {19, 1, 3, 106}, {34, 106, 1, 0, 106}, 
      {95, 1, 3, 0, 106, 3, 0, 107}, {34, 105, 107, 105}, {9, 2, 3}, 
      {19, 1, 3, 106}, {34, 106, 1, 106}, {41, 106, 106}, 
      {34, 105, 106, 105}, {38, 105, 106}, {30, 10, 102, 104, 106, 101}, 
      {34, 100, 101, 100}, {30, 98, 99, 100, 98}, {34, 97, 98, 97}, 
      {38, 9, 98}, {30, 6, 98, 98}, {34, 98, 98, 99}, {38, 10, 100}, 
      {30, 7, 100, 100}, {34, 100, 100, 101}, {38, 11, 102}, 
      {30, 8, 102, 102}, {34, 102, 102, 103}, {30, 99, 101, 103, 104}, 
      {41, 104, 105}, {34, 97, 105, 106}, {38, 106, 107}, 
      {30, 95, 96, 11, 107, 108}, {19, 1, 2, 109}, {34, 109, 93, 108, 110}, 
      {30, 44, 80, 110, 111}, {9, 2, 3}, {95, 1, 3, 0, 2, 3, 0, 112}, 
      {34, 3, 112, 112}, {9, 1, 4}, {9, 2, 5}, {19, 1, 5, 113}, 
      {34, 113, 1, 0, 113}, {95, 2, 3, 0, 113, 3, 0, 114}, {38, 114, 115}, 
      {19, 0, 4, 116}, {30, 116, 115, 113}, {95, 1, 3, 0, 2, 3, 0, 114}, 
      {34, 113, 114, 113}, {9, 2, 4}, {19, 1, 4, 114}, {34, 114, 1, 114}, 
      {41, 114, 114}, {34, 113, 114, 113}, {95, 2, 3, 0, 2, 3, 0, 114}, 
      {9, 2, 4}, {19, 1, 4, 115}, {34, 115, 1, 0, 115}, 
      {95, 1, 3, 0, 115, 3, 0, 116}, {34, 114, 116, 114}, {9, 2, 4}, 
      {19, 1, 4, 115}, {34, 115, 1, 115}, {41, 115, 115}, 
      {34, 114, 115, 114}, {38, 114, 115}, {38, 9, 116}, {30, 6, 116, 116}, 
      {38, 11, 117}, {30, 8, 117, 117}, {34, 4, 0, 118}, {38, 118, 119}, 
      {38, 5, 120}, {30, 119, 120, 11, 118}, {34, 117, 118, 117}, 
      {38, 9, 118}, {30, 6, 118, 118}, {95, 1, 3, 0, 2, 3, 0, 119}, 
      {34, 3, 119, 119}, {9, 1, 4}, {9, 2, 5}, {19, 1, 5, 120}, 
      {34, 120, 1, 0, 120}, {95, 2, 3, 0, 120, 3, 0, 121}, {38, 121, 122}, 
      {19, 0, 4, 123}, {30, 123, 122, 120}, {95, 1, 3, 0, 2, 3, 0, 121}, 
      {34, 120, 121, 120}, {9, 2, 4}, {19, 1, 4, 121}, {34, 121, 1, 121}, 
      {41, 121, 121}, {34, 120, 121, 120}, {95, 2, 3, 0, 2, 3, 0, 121}, 
      {9, 2, 4}, {19, 1, 4, 122}, {34, 122, 1, 0, 122}, 
      {95, 1, 3, 0, 122, 3, 0, 123}, {34, 121, 123, 121}, {9, 2, 4}, 
      {19, 1, 4, 122}, {34, 122, 1, 122}, {41, 122, 122}, 
      {34, 121, 122, 121}, {38, 121, 122}, {30, 9, 119, 120, 122, 119}, 
      {34, 118, 119, 118}, {38, 10, 119}, {30, 7, 119, 119}, 
      {95, 2, 3, 0, 2, 3, 0, 120}, {34, 3, 120, 120}, {38, 120, 121}, 
      {95, 2, 3, 0, 2, 3, 0, 122}, {9, 1, 4}, {9, 2, 5}, {19, 1, 5, 123}, 
      {34, 123, 1, 0, 123}, {95, 2, 3, 0, 123, 3, 0, 124}, {38, 124, 125}, 
      {19, 0, 4, 126}, {30, 126, 125, 123}, {34, 122, 123, 122}, {9, 2, 4}, 
      {19, 1, 4, 123}, {34, 123, 1, 123}, {41, 123, 123}, 
      {34, 122, 123, 122}, {38, 122, 123}, {95, 1, 3, 0, 2, 3, 0, 124}, 
      {9, 2, 4}, {19, 1, 4, 125}, {34, 125, 1, 0, 125}, 
      {95, 1, 3, 0, 125, 3, 0, 126}, {34, 124, 126, 124}, {9, 2, 4}, 
      {19, 1, 4, 125}, {34, 125, 1, 125}, {41, 125, 125}, 
      {34, 124, 125, 124}, {38, 124, 125}, {30, 10, 121, 123, 125, 120}, 
      {34, 119, 120, 119}, {30, 117, 118, 119, 117}, {34, 116, 117, 116}, 
      {38, 9, 117}, {30, 6, 117, 117}, {34, 117, 117, 118}, {38, 10, 119}, 
      {30, 7, 119, 119}, {34, 119, 119, 120}, {38, 11, 121}, 
      {30, 8, 121, 121}, {34, 121, 121, 122}, {30, 118, 120, 122, 123}, 
      {41, 123, 124}, {34, 116, 124, 125}, {38, 125, 126}, 
      {30, 9, 112, 113, 115, 126, 127}, {15, 127, 128}, {34, 128, 128, 129}, 
      {95, 2, 3, 0, 2, 3, 0, 130}, {34, 3, 130, 130}, {38, 130, 131}, 
      {95, 2, 3, 0, 2, 3, 0, 132}, {9, 1, 4}, {9, 2, 5}, {19, 1, 5, 133}, 
      {34, 133, 1, 0, 133}, {95, 2, 3, 0, 133, 3, 0, 134}, {38, 134, 135}, 
      {19, 0, 4, 136}, {30, 136, 135, 133}, {34, 132, 133, 132}, {9, 2, 4}, 
      {19, 1, 4, 133}, {34, 133, 1, 133}, {41, 133, 133}, 
      {34, 132, 133, 132}, {38, 132, 133}, {95, 1, 3, 0, 2, 3, 0, 134}, 
      {9, 2, 4}, {19, 1, 4, 135}, {34, 135, 1, 0, 135}, 
      {95, 1, 3, 0, 135, 3, 0, 136}, {34, 134, 136, 134}, {9, 2, 4}, 
      {19, 1, 4, 135}, {34, 135, 1, 135}, {41, 135, 135}, 
      {34, 134, 135, 134}, {38, 134, 135}, {38, 10, 136}, {30, 7, 136, 136}, 
      {38, 11, 137}, {30, 8, 137, 137}, {34, 4, 0, 138}, {38, 138, 139}, 
      {38, 5, 140}, {30, 139, 140, 11, 138}, {34, 137, 138, 137}, 
      {38, 9, 138}, {30, 6, 138, 138}, {95, 1, 3, 0, 2, 3, 0, 139}, 
      {34, 3, 139, 139}, {9, 1, 4}, {9, 2, 5}, {19, 1, 5, 140}, 
      {34, 140, 1, 0, 140}, {95, 2, 3, 0, 140, 3, 0, 141}, {38, 141, 142}, 
      {19, 0, 4, 143}, {30, 143, 142, 140}, {95, 1, 3, 0, 2, 3, 0, 141}, 
      {34, 140, 141, 140}, {9, 2, 4}, {19, 1, 4, 141}, {34, 141, 1, 141}, 
      {41, 141, 141}, {34, 140, 141, 140}, {95, 2, 3, 0, 2, 3, 0, 141}, 
      {9, 2, 4}, {19, 1, 4, 142}, {34, 142, 1, 0, 142}, 
      {95, 1, 3, 0, 142, 3, 0, 143}, {34, 141, 143, 141}, {9, 2, 4}, 
      {19, 1, 4, 142}, {34, 142, 1, 142}, {41, 142, 142}, 
      {34, 141, 142, 141}, {38, 141, 142}, {30, 9, 139, 140, 142, 139}, 
      {34, 138, 139, 138}, {38, 10, 139}, {30, 7, 139, 139}, 
      {95, 2, 3, 0, 2, 3, 0, 140}, {34, 3, 140, 140}, {38, 140, 141}, 
      {95, 2, 3, 0, 2, 3, 0, 142}, {9, 1, 4}, {9, 2, 5}, {19, 1, 5, 143}, 
      {34, 143, 1, 0, 143}, {95, 2, 3, 0, 143, 3, 0, 144}, {38, 144, 145}, 
      {19, 0, 4, 146}, {30, 146, 145, 143}, {34, 142, 143, 142}, {9, 2, 4}, 
      {19, 1, 4, 143}, {34, 143, 1, 143}, {41, 143, 143}, 
      {34, 142, 143, 142}, {38, 142, 143}, {95, 1, 3, 0, 2, 3, 0, 144}, 
      {9, 2, 4}, {19, 1, 4, 145}, {34, 145, 1, 0, 145}, 
      {95, 1, 3, 0, 145, 3, 0, 146}, {34, 144, 146, 144}, {9, 2, 4}, 
      {19, 1, 4, 145}, {34, 145, 1, 145}, {41, 145, 145}, 
      {34, 144, 145, 144}, {38, 144, 145}, {30, 10, 141, 143, 145, 140}, 
      {34, 139, 140, 139}, {30, 137, 138, 139, 137}, {34, 136, 137, 136}, 
      {38, 9, 137}, {30, 6, 137, 137}, {34, 137, 137, 138}, {38, 10, 139}, 
      {30, 7, 139, 139}, {34, 139, 139, 140}, {38, 11, 141}, 
      {30, 8, 141, 141}, {34, 141, 141, 142}, {30, 138, 140, 142, 143}, 
      {41, 143, 144}, {34, 136, 144, 145}, {38, 145, 146}, 
      {30, 10, 131, 133, 135, 146, 147}, {15, 147, 148}, {34, 148, 148, 149}, 
      {34, 4, 0, 150}, {38, 150, 151}, {38, 5, 152}, {38, 11, 153}, 
      {30, 8, 153, 153}, {38, 11, 154}, {30, 8, 154, 154}, {34, 4, 0, 155}, 
      {38, 155, 156}, {38, 5, 157}, {30, 156, 157, 11, 155}, 
      {34, 154, 155, 154}, {38, 9, 155}, {30, 6, 155, 155}, 
      {95, 1, 3, 0, 2, 3, 0, 156}, {34, 3, 156, 156}, {9, 1, 4}, {9, 2, 5}, 
      {19, 1, 5, 157}, {34, 157, 1, 0, 157}, {95, 2, 3, 0, 157, 3, 0, 158}, 
      {38, 158, 159}, {19, 0, 4, 160}, {30, 160, 159, 157}, 
      {95, 1, 3, 0, 2, 3, 0, 158}, {34, 157, 158, 157}, {9, 2, 4}, 
      {19, 1, 4, 158}, {34, 158, 1, 158}, {41, 158, 158}, 
      {34, 157, 158, 157}, {95, 2, 3, 0, 2, 3, 0, 158}, {9, 2, 4}, 
      {19, 1, 4, 159}, {34, 159, 1, 0, 159}, {95, 1, 3, 0, 159, 3, 0, 160}, 
      {34, 158, 160, 158}, {9, 2, 4}, {19, 1, 4, 159}, {34, 159, 1, 159}, 
      {41, 159, 159}, {34, 158, 159, 158}, {38, 158, 159}, 
      {30, 9, 156, 157, 159, 156}, {34, 155, 156, 155}, {38, 10, 156}, 
      {30, 7, 156, 156}, {95, 2, 3, 0, 2, 3, 0, 157}, {34, 3, 157, 157}, 
      {38, 157, 158}, {95, 2, 3, 0, 2, 3, 0, 159}, {9, 1, 4}, {9, 2, 5}, 
      {19, 1, 5, 160}, {34, 160, 1, 0, 160}, {95, 2, 3, 0, 160, 3, 0, 161}, 
      {38, 161, 162}, {19, 0, 4, 163}, {30, 163, 162, 160}, 
      {34, 159, 160, 159}, {9, 2, 4}, {19, 1, 4, 160}, {34, 160, 1, 160}, 
      {41, 160, 160}, {34, 159, 160, 159}, {38, 159, 160}, 
      {95, 1, 3, 0, 2, 3, 0, 161}, {9, 2, 4}, {19, 1, 4, 162}, 
      {34, 162, 1, 0, 162}, {95, 1, 3, 0, 162, 3, 0, 163}, 
      {34, 161, 163, 161}, {9, 2, 4}, {19, 1, 4, 162}, {34, 162, 1, 162}, 
      {41, 162, 162}, {34, 161, 162, 161}, {38, 161, 162}, 
      {30, 10, 158, 160, 162, 157}, {34, 156, 157, 156}, 
      {30, 154, 155, 156, 154}, {34, 153, 154, 153}, {38, 9, 154}, 
      {30, 6, 154, 154}, {34, 154, 154, 155}, {38, 10, 156}, 
      {30, 7, 156, 156}, {34, 156, 156, 157}, {38, 11, 158}, 
      {30, 8, 158, 158}, {34, 158, 158, 159}, {30, 155, 157, 159, 160}, 
      {41, 160, 161}, {34, 153, 161, 162}, {38, 162, 163}, 
      {30, 151, 152, 11, 163, 164}, {15, 164, 165}, {34, 165, 165, 166}, 
      {30, 129, 149, 166, 167}, {95, 54, 3, 0, 167, 3, 0, 168}, 
      {19, 1, 3, 169}, {34, 169, 168, 170}, {41, 170, 171}, 
      {34, 111, 171, 172}, {4, 172}}, Function[{sp, curv, phi0, d0, cotTh, 
       z0, x1, y1, z1, x2, y2, z2}, 
      (2*(-(Cos[phi0]*Cos[2*curv*sp]) + Sin[phi0]*Sin[2*curv*sp] - 
          ((x1 - x2)*(-(cotTh*(z1 - z2)) + (y1 - y2)*(-(Cos[2*curv*sp]*
                 Sin[phi0]) - Cos[phi0]*Sin[2*curv*sp]) + 
             (x1 - x2)*(-(Cos[phi0]*Cos[2*curv*sp]) + Sin[phi0]*
                Sin[2*curv*sp])))/((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2))*
         (x2 + d0*Sin[phi0] + ((1 - Cos[2*curv*sp])*Sin[phi0])/(2*curv) - 
          (Cos[phi0]*Sin[2*curv*sp])/(2*curv) - 
          ((x1 - x2)*((z1 - z2)*(-(cotTh*sp) - z0 + z2) + 
             (x1 - x2)*(x2 + d0*Sin[phi0] + ((1 - Cos[2*curv*sp])*Sin[phi0])/
                (2*curv) - (Cos[phi0]*Sin[2*curv*sp])/(2*curv)) + 
             (y1 - y2)*(y2 - d0*Cos[phi0] - (Cos[phi0]*(1 - Cos[2*curv*sp]))/
                (2*curv) - (Sin[phi0]*Sin[2*curv*sp])/(2*curv))))/
           ((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2)) + 
        2*(-(Cos[2*curv*sp]*Sin[phi0]) - Cos[phi0]*Sin[2*curv*sp] - 
          ((y1 - y2)*(-(cotTh*(z1 - z2)) + (y1 - y2)*(-(Cos[2*curv*sp]*
                 Sin[phi0]) - Cos[phi0]*Sin[2*curv*sp]) + 
             (x1 - x2)*(-(Cos[phi0]*Cos[2*curv*sp]) + Sin[phi0]*
                Sin[2*curv*sp])))/((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2))*
         (y2 - d0*Cos[phi0] - (Cos[phi0]*(1 - Cos[2*curv*sp]))/(2*curv) - 
          (Sin[phi0]*Sin[2*curv*sp])/(2*curv) - 
          ((y1 - y2)*((z1 - z2)*(-(cotTh*sp) - z0 + z2) + 
             (x1 - x2)*(x2 + d0*Sin[phi0] + ((1 - Cos[2*curv*sp])*Sin[phi0])/
                (2*curv) - (Cos[phi0]*Sin[2*curv*sp])/(2*curv)) + 
             (y1 - y2)*(y2 - d0*Cos[phi0] - (Cos[phi0]*(1 - Cos[2*curv*sp]))/
                (2*curv) - (Sin[phi0]*Sin[2*curv*sp])/(2*curv))))/
           ((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2)) + 
        2*(-cotTh - ((z1 - z2)*(-(cotTh*(z1 - z2)) + (y1 - y2)*
              (-(Cos[2*curv*sp]*Sin[phi0]) - Cos[phi0]*Sin[2*curv*sp]) + 
             (x1 - x2)*(-(Cos[phi0]*Cos[2*curv*sp]) + Sin[phi0]*
                Sin[2*curv*sp])))/((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2))*
         (-(cotTh*sp) - z0 + z2 - ((z1 - z2)*((z1 - z2)*(-(cotTh*sp) - z0 + 
               z2) + (x1 - x2)*(x2 + d0*Sin[phi0] + ((1 - Cos[2*curv*sp])*
                 Sin[phi0])/(2*curv) - (Cos[phi0]*Sin[2*curv*sp])/(2*curv)) + 
             (y1 - y2)*(y2 - d0*Cos[phi0] - (Cos[phi0]*(1 - Cos[2*curv*sp]))/
                (2*curv) - (Sin[phi0]*Sin[2*curv*sp])/(2*curv))))/
           ((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2)))/
       (2*Sqrt[(x2 + d0*Sin[phi0] + ((1 - Cos[2*curv*sp])*Sin[phi0])/
             (2*curv) - (Cos[phi0]*Sin[2*curv*sp])/(2*curv) - 
            ((x1 - x2)*((z1 - z2)*(-(cotTh*sp) - z0 + z2) + (x1 - x2)*
                (x2 + d0*Sin[phi0] + ((1 - Cos[2*curv*sp])*Sin[phi0])/
                  (2*curv) - (Cos[phi0]*Sin[2*curv*sp])/(2*curv)) + (y1 - y2)*
                (y2 - d0*Cos[phi0] - (Cos[phi0]*(1 - Cos[2*curv*sp]))/
                  (2*curv) - (Sin[phi0]*Sin[2*curv*sp])/(2*curv))))/
             ((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2))^2 + 
          (y2 - d0*Cos[phi0] - (Cos[phi0]*(1 - Cos[2*curv*sp]))/(2*curv) - 
            (Sin[phi0]*Sin[2*curv*sp])/(2*curv) - 
            ((y1 - y2)*((z1 - z2)*(-(cotTh*sp) - z0 + z2) + (x1 - x2)*
                (x2 + d0*Sin[phi0] + ((1 - Cos[2*curv*sp])*Sin[phi0])/
                  (2*curv) - (Cos[phi0]*Sin[2*curv*sp])/(2*curv)) + (y1 - y2)*
                (y2 - d0*Cos[phi0] - (Cos[phi0]*(1 - Cos[2*curv*sp]))/
                  (2*curv) - (Sin[phi0]*Sin[2*curv*sp])/(2*curv))))/
             ((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2))^2 + 
          (-(cotTh*sp) - z0 + z2 - ((z1 - z2)*((z1 - z2)*(-(cotTh*sp) - z0 + 
                 z2) + (x1 - x2)*(x2 + d0*Sin[phi0] + ((1 - Cos[2*curv*sp])*
                   Sin[phi0])/(2*curv) - (Cos[phi0]*Sin[2*curv*sp])/
                  (2*curv)) + (y1 - y2)*(y2 - d0*Cos[phi0] - 
                 (Cos[phi0]*(1 - Cos[2*curv*sp]))/(2*curv) - 
                 (Sin[phi0]*Sin[2*curv*sp])/(2*curv))))/((x1 - x2)^2 + 
              (y1 - y2)^2 + (z1 - z2)^2))^2])]]
 
helixPoint[sp_, {curv_, phi0_, d0_, cotTh_, z0_}] := 
    helixPointInternal[sp, curv, phi0, d0, cotTh, z0]
 
helixPointInternal = CompiledFunction[{_Real, _Real, _Real, _Real, _Real, 
      _Real}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 3}, {3, 0, 4}, 
      {3, 0, 5}}, {0, 1, 18, 0, 1}, {{1, 3}, {9, 2, 0}, {19, 1, 0, 6}, 
      {34, 6, 1, 6}, {95, 2, 3, 0, 2, 3, 0, 7}, {95, 1, 3, 0, 2, 3, 0, 8}, 
      {95, 1, 3, 0, 2, 3, 0, 9}, {34, 3, 9, 9}, {38, 9, 10}, {15, 10, 9}, 
      {95, 2, 3, 0, 2, 3, 0, 10}, {34, 3, 10, 10}, {41, 6, 11}, 
      {34, 7, 11, 11}, {34, 6, 0, 12}, {95, 1, 3, 0, 12, 3, 0, 13}, 
      {34, 11, 13, 11}, {41, 6, 12}, {34, 8, 12, 12}, {9, 1, 0}, 
      {34, 6, 0, 13}, {95, 2, 3, 0, 13, 3, 0, 14}, {38, 14, 15}, 
      {19, 0, 0, 16}, {30, 16, 15, 13}, {34, 12, 13, 12}, {38, 12, 13}, 
      {30, 9, 11, 13, 11}, {41, 6, 12}, {34, 8, 12, 12}, {34, 6, 0, 13}, 
      {95, 1, 3, 0, 13, 3, 0, 14}, {34, 12, 14, 12}, {41, 6, 13}, 
      {34, 7, 13, 13}, {9, 1, 0}, {34, 6, 0, 14}, {95, 2, 3, 0, 14, 3, 0, 
       15}, {38, 15, 16}, {19, 0, 0, 17}, {30, 17, 16, 14}, {34, 13, 14, 13}, 
      {30, 10, 12, 13, 12}, {34, 4, 0, 13}, {30, 5, 13, 13}, 
      {68, 11, 12, 13, 3, 0}, {6, 3, 1, 0}}, 
     Function[{sp, curv, phi0, d0, cotTh, z0}, 
      Module[{rho = 2*curv, u0 = Cos[phi0], v0 = Sin[phi0], 
        x0 = -(d0*Sin[phi0]), y0 = d0*Cos[phi0]}, 
       {x0 + u0/rho*Sin[rho*sp] - v0/rho*(1 - Cos[rho*sp]), 
        y0 + v0/rho*Sin[rho*sp] + u0/rho*(1 - Cos[rho*sp]), z0 + cotTh*sp}]]]
 
Attributes[wire$286948874] = {Temporary}
 
Attributes[dca$286948874] = {Temporary}
