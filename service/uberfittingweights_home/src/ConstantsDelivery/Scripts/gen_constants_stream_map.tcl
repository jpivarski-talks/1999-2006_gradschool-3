#!/usr/local/bin/tclsh 
#=======================================================================
# Program: gen_default_streams
#
# Purpose: generate the code needed to built a Stream::Set of all the
#          Streams a ConstantsSource could read from.
#
# How to Use: the script takes two argument.
#             First: directory to look for its files
#             Second:  a file containing a table of constants names, 
#             stream that holds the constant, and optionally the file that
#             must be included to find the stream definition.  If the first 
#             line of the file begins with '#' then that line is ignored
#
# Author: Chris Jones
#=======================================================================

#----------------------------------------------------------------
#
# Configuration variables
#
#----------------------------------------------------------------

# the skeleton file used to build all the instantiate files
set skelFileName "ConstantsStreamMap.cc"

# the subdirectory to put the autogenerated code
set codeDirName ""
 
#----------------------------------------------------------------
#
# Set up a table that is filled with data we have obtained from
#  our input file
#
#----------------------------------------------------------------

# open directory
set directory [ lindex $argv 0 ]

set fullSkelFileName "$directory/Scripts/$skelFileName"

set directory [ lindex $argv 1 ]
set codeDirName "$directory/$codeDirName"

# open the file that contains the table
set tableFile [ open [ lindex $argv 2 ] r ]

# bring in our parsing routines and global variables
source "$env(C3_CVSSRC)/BDLclientInst/Scripts/parse_file.tcl"

set table [ parse_file $tableFile ]

close $tableFile

# Now that we have our data organized, we need to generate code

#----------------------------------------------------------------
#
# fill in the skeleton
#
#----------------------------------------------------------------

#find all the unique Stream include files
set streamIncFiles [list]

foreach constInfo $table {
    set streamFile [lindex $constInfo $tableColumnStreamFile]
    set isUnique 1
    foreach streamIncFile $streamIncFiles {
	if [string match $streamFile $streamIncFile] {
	    set isUnique 0
	    break
	}
    }
    if { $isUnique == 1 } {
	lappend streamIncFiles $streamFile
    }
}

set streamNames [list]
foreach constInfo $table {
    set streamName [lindex $constInfo $tableColumnStreamName]
    set isUnique 1
    foreach tempStreamName $streamNames {
	if [string match $streamName $tempStreamName] {
	    set isUnique 0
	    break
	}
    }
    if { $isUnique == 1 } {
	lappend streamNames $streamName
    }
}

set skelFile [open $fullSkelFileName r]
set outFile [open "$codeDirName/$skelFileName" w]
while { [ gets $skelFile line ] >= 0 } {

    set outputLine 1
    if [string match "_stream_incs_" $line] {
	foreach streamInc $streamIncFiles {
	    puts $outFile "#include \"$streamInc\""
	}
	set outputLine 0
    }

    if [regexp "_onlineconstant_name_" $line] {
	foreach constInfo $table {
	    if { "on" == [lindex $constInfo $tableColumnOnOff] } {
		set constName [lindex $constInfo $tableColumnConstName]
		regsub -all "_onlineconstant_name_" $line $constName outLine
		puts $outFile $outLine
	    }
	}
	set outputLine 0
    }

    if [regexp "_stream_name_" $line] {
	foreach constInfo $table {
	    set streamName [lindex $constInfo $tableColumnStreamName]
	    set constName [lindex $constInfo $tableColumnConstName]

	    regsub -all "_stream_name_" $line $streamName outLine
	    regsub -all "_constant_name_" $outLine $constName outLine
	    puts $outFile $outLine
	}
	set outputLine 0
    }

    #if no substitution, then output the line
    if { 1 == $outputLine } {
	puts $outFile $line
    }
}

