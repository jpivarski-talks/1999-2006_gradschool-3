#=============================================================================
#
# Purpose: Link a Processor/Producer
#
# How to use:
#
#   1.) Copy this file to your build area. (Please don't build code in your
#       source area!)
#
#   2.) This makefile includes "M.tail", which contains all the "meat".
#       (suffix rules, platform dependencies etc.)
#
#   3.) Dependencies (ala makedepend) are done via a ".depend" file 
#       which gets created and include by "M.tail".
#
#   4.) Make sure the environment variable USER_SRC is set to the
#       directory *above* the source code:
#         e.g. "setenv USER_SRC /home/mkl/work/cleo3/cvssrc"
#
#   5.) To link a shared library, do"
#         unix> gmake CXX=<compiler> shared_module
#         e.g. "gmake CXX=cxx shared_module"
#
#   6.) The library will appear by default as "../lib/lib<directory>.a", 
#       and the linked shared library as "../shlib/<directory>.so".
#       If you want the shared library name to have a different name,
#       specify that name with "SHARMODNAME" below.
#
#   7.) To compile and link in debug mode, use "DEBUG=y":
#          e.g. "gmake CXX=cxx DEBUG=y shared_module"
#        This will result in an appended "_g" to library and 
#       shared library names.
#
#   8.) You can OVERRIDE any symbol used in a makefile by specifying the new
#       symbol on the command line, for example, 
#          e.g. "gmake USER_OBJS=myfunc.o"
#       Please remember that this will OVERRIDE any value specified in the 
#       Makefile. If you just which to add extra information to the current
#       makefile value the 'XTRA_????' symbols have been created. Look through
#       this file to see which symbols add to the makefile symbols. 
#
#=============================================================================
SHELL := /bin/sh
USER_LINK := CXX
#
#----------------------------
# name of job and executable
#----------------------------

ifeq "$(JOB)" ""
  WHERE := $(shell pwd)
  JOB := $(notdir $(WHERE))
endif

# if you want your shared processor to have a distinctive name other
# than "<LIBNAME>.so", specify it here. E.g. MyLibProd
SHARMODNAME := 

#----------------------------------------
# List of subdirectories containing code
#----------------------------------------

DIR_LIST :=	. Class Instantiate $(XTRA_DIR)

OTHR_DIR_LIST := .


#-------------------------------------------------------
# list of include directories
# USER_INCS should be defined with respect to USER_SRC
# CLEO3_INCS should be set to C3_INC; $USER_SRC/include is implicitly included
# OTHR_INCS should be defined with respect to C3_OTHER
# CLEO_INCS should be defined with respect to C_CVSSRC
# CERN_INCS should be defined with respect to CERNSRC
# (don't forget to leave the "." in the CLEO_INCS list)
#-------------------------------------------------------

USER_INCS  :=   . $(XTRA_INCS) 
CLEO3_INCS :=	$(C3_INC) 
OTHR_INCS  =   . $(ORB_ROOT)/include
CLEO_INCS  :=   .
CERN_INCS  :=   .
COMM_INCS  =    versionutil timeutil $(CONSTANTS_INCS) \
                $(COMM_OS_NAME)/BDLORB \
		$(COMM_OS_NAME)/BDLCCORB\
		$(COMM_OS_NAME)/BDLOORB\
		$(COMM_OS_NAME)/BDLDRORB\
		$(COMM_OS_NAME)/BDLZDORB\
		$(COMM_OS_NAME)/BDLMUORB\
		$(COMM_OS_NAME)/BDLRICHORB\
		$(COMM_OS_NAME)/BDLSVORB\
		$(COMM_OS_NAME)/BDLTRIGMCORB\
		$(COMM_OS_NAME)/BDLOfflineORB\
                $(COMM_OS_NAME)/CLEORB


#--------------------------------------------------------------
# extra compiler/linker flags
#--------------------------------------------------------------

USER_FFLAGS     := $(XTRA_FFLAGS)
USER_CFLAGS     := $(XTRA_CFLAGS)
USER_CXXFLAGS   := $(XTRA_CXXFLAGS)


#---------------------------------------------
# #define for cpp, define SELECT symbols here
#---------------------------------------------

USER_DEFS :=    $(XTRA_DEFS)

#--------------------------------------------------------------
# invoke standard tail to Makefile to execute compile and link
#--------------------------------------------------------------

# Here's an ugly kluge to prevent compilation on any platform other than
# Solaris:

SCRIPTS_DIR := Scripts

ifeq "$(C3_CONST_INFO_FILE)" ""
C3_CONST_INFO_FILE := $(C3_CVSSRC)/BDLclientInst/constants.map
endif

AUTOGEN := y
include $(C3_GMAKE)/M.tail

GENERATED_FILES := \
	constants.map \
	ConstantsProxyDeliverer_registerFactories1.cc \
	ConstantsProxyDeliverer_registerFactories2.cc \
	ConstantsStreamMap.cc

# alows you to remove all the autogenerated code
rmgen :
	-rm -f $(GENERATED_FILES) constants.map*

# Need to run code generators before checking for dependencies, that
# way the newly created code will be checked for dependencies
gen : $(GENERATED_FILES)

constants.map: $(C3_CONST_INFO_FILE)
	@echo "--> Check local constants.map against those in BDLclientInst"
	@echo "--> First remove existing maps"
	@test ! -f constants.map || rm constants.map
	@test ! -f constants.map_top || rm constants.map_top
	@test ! -f constants.map_bottom || rm constants.map_bottom
	@test ! -f CP2ProxyDeliverer_registerFactories1.cc || rm CP2ProxyDeliverer_registerFactories1.cc
	@test ! -f CP2ProxyDeliverer_registerFactories2.cc || rm CP2ProxyDeliverer_registerFactories2.cc
	@echo "--> Get local copy of constants.map"
	@test -f constants.map || grep -v "#" $(C3_CONST_INFO_FILE)>constants.map 
	@echo "--> Do first half of constants.map"
	@test -f constants.map_top || head -n `cat constants.map | wc -l | awk '{print int($$1/2)}'` constants.map >constants.map_top
	@echo "--> Do second half of constants.map"
	@test -f constants.map_bottom || tail -n `cat constants.map | wc -l | awk '{print $$1-int($$1/2)}'` constants.map>constants.map_bottom

# here we split original constants.map into two equal pieces in
# order to save compilation time. First we parse the file and remove 
# all comments (#), then head/tail to create temporary map files
# which finally parsed by tcl script. (trick here is to escape $ sign by
# using $$ since $ is special symbol in Makefiles).
ConstantsProxyDeliverer_registerFactories1.cc : \
	    $(C3_CONST_INFO_FILE) \
	    $(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/ConstantsProxyDeliverer_registerFactories.cc \
	    $(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/gen_proxies.tcl
	$(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/gen_proxies.tcl \
	    $(USER_SRC)/$(JOB) . constants.map_top
	@test -f ConstantsProxyDeliverer_registerFactories1.cc || \
	 cat ConstantsProxyDeliverer_registerFactories.cc |\
	 sed "s/registerProxyFactories/registerProxyFactories1/g" > \
	 ConstantsProxyDeliverer_registerFactories1.cc
	@test ! -f ConstantsProxyDeliverer_registerFactories.cc || rm ConstantsProxyDeliverer_registerFactories.cc

ConstantsProxyDeliverer_registerFactories2.cc : \
	    $(C3_CONST_INFO_FILE) \
	    $(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/ConstantsProxyDeliverer_registerFactories.cc \
	    $(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/gen_proxies.tcl
	$(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/gen_proxies.tcl \
	    $(USER_SRC)/$(JOB) . constants.map_bottom
	@test -f ConstantsProxyDeliverer_registerFactories2.cc || \
	 cat ConstantsProxyDeliverer_registerFactories.cc |\
	 sed "s/registerProxyFactories/registerProxyFactories2/g" > \
	 ConstantsProxyDeliverer_registerFactories2.cc
	@test ! -f ConstantsProxyDeliverer_registerFactories.cc || rm ConstantsProxyDeliverer_registerFactories.cc

ConstantsStreamMap.cc : \
	    $(C3_CONST_INFO_FILE) \
	    $(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/ConstantsStreamMap.cc \
	    $(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/gen_constants_stream_map.tcl
	$(USER_SRC)/$(JOB)/$(SCRIPTS_DIR)/gen_constants_stream_map.tcl \
	    $(USER_SRC)/$(JOB) . $(C3_CONST_INFO_FILE)  

#
# $Id: Makefile,v 1.37 2003/09/19 13:43:12 vk Exp $
#
# DO NOT DELETE
